ggplot(vals,aes(x=species,y=Estimate,fill=val))+geom_bar(position = position_dodge(0.6),stat="identity")+xlab("species") + ylab("coef") + labs(fill="val")+coord_flip(expand=T)+ geom_hline(aes(yintercept = 0),linetype="dashed",size=0.5) +theme_classic() +geom_text( aes(y= Estimate, label = sig),position = position_dodge(0.6), size = 3, fontface = "bold")
#+geom_errorbar(aes(ymax = Estimate + se, ymin = Estimate - se),position = position_dodge(0.9), width = 0.3)
View(effect_comb)
#Drawing parameter of OTU and environmental covariant
par(mfrow=c(1,1))
effects= apply(result$beta[[1]], 1, function(o) sum(abs(o)))
n = ncol(result$sigma)# number of otus
max_effects= apply(result$beta[[1]],2, function(e) which.max(abs(e)))
effect_comb = data.frame(cbind(max_effects,sapply(1:n, function(i) result$beta[[1]][max_effects[i],i] )))
effect_comb$name <-spnames2
effect_comb$abun<-communityB_sort_abun$abun
effect_comb$abun<-as.character(effect_comb$abun)
effect_comb_ind = order(effect_comb[,1], effect_comb[,2])
effect_comb = effect_comb[effect_comb_ind, ]
sigma = re_scale(result$sigma)[effect_comb_ind, effect_comb_ind]
sigmas = sigma[upper.tri(sigma)]
number=100
upper = order(sigmas, decreasing = TRUE)[1:number]
lower = order(sigmas, decreasing = FALSE)[1:number]
cuts = cut(sigmas, breaks = seq(-1,1,length.out = 12))
to_plot = 1:length(sigmas) %in% upper | 1:length(sigmas) %in% lower
levels(cuts) = viridis::viridis(11)
cuts = as.character(cuts)
lineSeq = 3.5
nseg = 100
#Drawing figure parameter
#layout(matrix(c(1,2,3,rep(4,9)), 3,3 ,byrow = F), c(0.9,1.3,1.3), c(1,1,1))
par( mar = c(1,2,2.1,2)+0.1)
plot(NULL, NULL, xlim = c(-5,5), ylim =c(-5,5),pty="s", axes = F, xlab = "", ylab = "")
text(x = -4.5, y = 5.3, pos = 3, xpd = NA, labels = "best", font = 2, cex = 1)
xx = lineSeq*cos( seq(0,2*pi, length.out=nseg) )
yy = lineSeq*sin( seq(0,2*pi, length.out=nseg) )
polygon(xx,yy, col= "white", border = "black", lty = 1, lwd = 1)
angles = seq(0,360,length.out = n+1)[1:(n)] # for all otus
xx = cos(deg2rad(angles))*lineSeq
yy = sin(deg2rad(angles))*lineSeq
##inside circle
counter = 1
coords = cbind(xx, yy, angles)
#spnames=paste("sp",1:22,sep="")
for(i in 2:n) {
for(j in 1:(i-1)){
if(to_plot[counter]) add_curve(coords[i,], coords[j,], col = cuts[counter], n = 5, species = T, lineSeq = 3.5, lwd = 1.3)
counter = counter + 1
#cat(counter, "\n")
}
}
##outside circle
#evnames=c("altitude","site","infestation","stump","die_wood","height","DBH","structure","arbor","canopy")
evnames=c("altitude","canopy","DBH","infestation","stump")
colourCount = length(unique(evnames))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(10, "Dark2"))
cols=getPalette(colourCount)
#cols = RColorBrewer::brewer.pal(11,"Set3")
coords = data.frame(cbind(xx, yy, angles))
effect_comb=effect_comb[,-c(3,4)]
effect_comb2 = effect_comb
effect_comb2[,2] = ff(effect_comb[,2])
effect_comb2 = cbind(effect_comb2, effect_comb[,2])
effect_comb2 = data.frame(effect_comb2)
for(i in sort(unique(max_effects))) {
sub<- coords %>% filter(effect_comb2$max_effects==i)
sub_eff <- effect_comb2 %>% filter(max_effects==i)
from <- sub[1,3]
to <- sub[nrow(sub),3]
x = c((3.6+1.5*(sub_eff[,2]))*cos(deg2rad(sub[,3]) ),
rev((3.6+1.5/2)*cos(deg2rad(sub[,3]))))
y = c((3.6+1.5*(sub_eff[,2]))*sin(deg2rad(sub[,3])),
rev((3.6+1.5/2)*sin(deg2rad(sub[,3]))))
#names(habitat2)
angleName = (from+to)/2
if(angleName > 180) reverse = TRUE
else reverse = FALSE
###environment variable text
curve_text(angleName, label = evnames[i],reverse = reverse,lineSeq = 5.5, middle = TRUE, extend = 1.1, col = cols[i])
###environment variable bar
if(i == 2) polygon(x+0.4, y, xpd = NA,col = cols[i])
else if(i == 6) polygon(x, y+0.55, xpd = NA,col = cols[i])
else if(i == 15) polygon(x-0.6, y-0.2, xpd = NA,col = cols[i])
else if(i == 18) polygon(x, y-0.55, xpd = NA,col = cols[i])
#else if(i == 12) polygon(x-0.2, y-0.5, xpd = NA,col = cols[i])
else polygon(x, y, xpd = NA,col = cols[i])
###environment variable range number
text(srt = 0,
x = (3.6+1.5)*cos(deg2rad(sub[1,3]+4)),
y =  (3.6+1.5)*sin(deg2rad(sub[1,3]+4)),
xpd = NA, labels = round(min(sub_eff[,3]), 2), col = cols[i], cex = 0.8)
text(srt = 0,
x = (3.6+1.5)*cos(deg2rad(sub[nrow(sub),3]-4)),
y =  (3.6+1.5)*sin(deg2rad(sub[nrow(sub),3]-4)),
xpd = NA, labels = round(max(sub_eff[,3]), 2), col = cols[i], cex = 0.8)
}
###legend of bar
rec_cols = viridis::viridis(11)
x = seq(3,5, length.out = 12)
for(i in 1:length(rec_cols)){
rect(xleft = x[i], xright = x[i+1], ybottom = -5, ytop = -5+diff(x)[1], col = rec_cols[i], xpd = NA, border = NA)
}
text(x[1],-5.2, labels = -1)
text(x[11],-5.2, labels = +1)
rec_cols = viridis::viridis(11)
x = seq(3,5, length.out = 12)
for(i in 1:length(rec_cols)){
rect(xleft = x[i], xright = x[i+1], ybottom = -5, ytop = -5+diff(x)[1], col = rec_cols[i], xpd = NA, border = NA)
}
#abun=as.character(abun)
#x = seq(-5.5,-3, length.out = 21)
#for(i in 1:length(abun)){
# rect(xleft = x[i], xright = x[i+1], ybottom = -5, ytop = -5+diff(x)[1], col = abun[i], xpd = NA, border = NA)
#text(x= x[1]-0.2, y=-5.2, labels = "2", pos = 4, xpd = NA)
#text(x= x[20]-0.2, y=-5.2, labels = "151", pos = 4, xpd = NA)
#}
#text(x=-5, y=-5.3, labels = "Sp. incidence", pos = 4, xpd = NA)
View(effect_comb)
View(communityB_sort_abun)
View(effect_comb2)
#Drawing parameter of OTU and environmental covariant
par(mfrow=c(1,1))
effects= apply(result$beta[[1]], 1, function(o) sum(abs(o)))
n = ncol(result$sigma)# number of otus
max_effects= apply(result$beta[[1]],2, function(e) which.max(abs(e)))
effect_comb = data.frame(cbind(max_effects,sapply(1:n, function(i) result$beta[[1]][max_effects[i],i] )))
effect_comb$name <-spnames2
effect_comb$abun<-communityB_sort_abun$abun
effect_comb$abun<-as.character(effect_comb$abun)
effect_comb_ind = order(effect_comb[,1], effect_comb[,2])
effect_comb = effect_comb[effect_comb_ind, ]
sigma = re_scale(result$sigma)[effect_comb_ind, effect_comb_ind]
sigmas = sigma[upper.tri(sigma)]
number=10
upper = order(sigmas, decreasing = TRUE)[1:number]
lower = order(sigmas, decreasing = FALSE)[1:number]
cuts = cut(sigmas, breaks = seq(-1,1,length.out = 12))
to_plot = 1:length(sigmas) %in% upper | 1:length(sigmas) %in% lower
levels(cuts) = viridis::viridis(11)
cuts = as.character(cuts)
lineSeq = 3.5
nseg = 100
#Drawing figure parameter
#layout(matrix(c(1,2,3,rep(4,9)), 3,3 ,byrow = F), c(0.9,1.3,1.3), c(1,1,1))
par( mar = c(1,2,2.1,2)+0.1)
plot(NULL, NULL, xlim = c(-5,5), ylim =c(-5,5),pty="s", axes = F, xlab = "", ylab = "")
text(x = -4.5, y = 5.3, pos = 3, xpd = NA, labels = "best", font = 2, cex = 1)
xx = lineSeq*cos( seq(0,2*pi, length.out=nseg) )
yy = lineSeq*sin( seq(0,2*pi, length.out=nseg) )
polygon(xx,yy, col= "white", border = "black", lty = 1, lwd = 1)
angles = seq(0,360,length.out = n+1)[1:(n)] # for all otus
xx = cos(deg2rad(angles))*lineSeq
yy = sin(deg2rad(angles))*lineSeq
##inside circle
counter = 1
coords = cbind(xx, yy, angles)
for(i in 2:n) {
for(j in 1:(i-1)){
if(to_plot[counter]) add_curve(coords[i,], coords[j,], col = cuts[counter], n = 5, species = T, lineSeq = 3.5, lwd = 1.3)
counter = counter + 1
#cat(counter, "\n")
}
}
communityB_logs
communityB_sort_abun
View(communityB_sort_abun)
View(effect_comb)
#Drawing parameter of OTU and environmental covariant
par(mfrow=c(1,1))
effects= apply(result$beta[[1]], 1, function(o) sum(abs(o)))
n = ncol(result$sigma)# number of otus
max_effects= apply(result$beta[[1]],2, function(e) which.max(abs(e)))
effect_comb = data.frame(cbind(max_effects,sapply(1:n, function(i) result$beta[[1]][max_effects[i],i] )))
effect_comb$name <-spnames2
effect_comb$abun<-communityB_sort_abun$abun
effect_comb$abun<-as.character(effect_comb$abun)
effect_comb_ind = order(effect_comb[,1], effect_comb[,2])
effect_comb = effect_comb[effect_comb_ind, ]
sigma = re_scale(result$sigma)[effect_comb_ind, effect_comb_ind]
sigmas = sigma[upper.tri(sigma)]
number=10
upper = order(sigmas, decreasing = TRUE)[1:number]
lower = order(sigmas, decreasing = FALSE)[1:number]
cuts = cut(sigmas, breaks = seq(-1,1,length.out = 12))
to_plot = 1:length(sigmas) %in% upper | 1:length(sigmas) %in% lower
levels(cuts) = viridis::viridis(11)
cuts = as.character(cuts)
lineSeq = 3.5
nseg = 100
#Drawing figure parameter
#layout(matrix(c(1,2,3,rep(4,9)), 3,3 ,byrow = F), c(0.9,1.3,1.3), c(1,1,1))
par( mar = c(1,2,2.1,2)+0.1)
plot(NULL, NULL, xlim = c(-5,5), ylim =c(-5,5),pty="s", axes = F, xlab = "", ylab = "")
text(x = -4.5, y = 5.3, pos = 3, xpd = NA, labels = "best", font = 2, cex = 1)
xx = lineSeq*cos( seq(0,2*pi, length.out=nseg) )
yy = lineSeq*sin( seq(0,2*pi, length.out=nseg) )
polygon(xx,yy, col= "white", border = "black", lty = 1, lwd = 1)
angles = seq(0,360,length.out = n+1)[1:(n)] # for all otus
xx = cos(deg2rad(angles))*lineSeq
yy = sin(deg2rad(angles))*lineSeq
##inside circle
counter = 1
coords = cbind(xx, yy, angles)
#spnames=paste("sp",1:22,sep="")
for(i in 2:n) {
for(j in 1:(i-1)){
if(to_plot[counter]) add_curve(coords[i,], coords[j,], col = cuts[counter], n = 5, species = T, lineSeq = 3.5, lwd = 1.3)
counter = counter + 1
#cat(counter, "\n")
}
}
##outside circle
#evnames=c("altitude","site","infestation","stump","die_wood","height","DBH","structure","arbor","canopy")
evnames=c("altitude","canopy","DBH","infestation","stump")
colourCount = length(unique(evnames))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(10, "Dark2"))
cols=getPalette(colourCount)
#cols = RColorBrewer::brewer.pal(11,"Set3")
coords = data.frame(cbind(xx, yy, angles))
effect_comb=effect_comb[,-c(3,4)]
effect_comb2 = effect_comb
effect_comb2[,2] = ff(effect_comb[,2])
effect_comb2 = cbind(effect_comb2, effect_comb[,2])
effect_comb2 = data.frame(effect_comb2)
for(i in sort(unique(max_effects))) {
sub<- coords %>% filter(effect_comb2$max_effects==i)
sub_eff <- effect_comb2 %>% filter(max_effects==i)
from <- sub[1,3]
to <- sub[nrow(sub),3]
x = c((3.6+1.5*(sub_eff[,2]))*cos(deg2rad(sub[,3]) ),
rev((3.6+1.5/2)*cos(deg2rad(sub[,3]))))
y = c((3.6+1.5*(sub_eff[,2]))*sin(deg2rad(sub[,3])),
rev((3.6+1.5/2)*sin(deg2rad(sub[,3]))))
#names(habitat2)
angleName = (from+to)/2
if(angleName > 180) reverse = TRUE
else reverse = FALSE
###environment variable text
curve_text(angleName, label = evnames[i],reverse = reverse,lineSeq = 5.5, middle = TRUE, extend = 1.1, col = cols[i])
###environment variable bar
if(i == 2) polygon(x+0.4, y, xpd = NA,col = cols[i])
else if(i == 6) polygon(x, y+0.55, xpd = NA,col = cols[i])
else if(i == 15) polygon(x-0.6, y-0.2, xpd = NA,col = cols[i])
else if(i == 18) polygon(x, y-0.55, xpd = NA,col = cols[i])
#else if(i == 12) polygon(x-0.2, y-0.5, xpd = NA,col = cols[i])
else polygon(x, y, xpd = NA,col = cols[i])
###environment variable range number
text(srt = 0,
x = (3.6+1.5)*cos(deg2rad(sub[1,3]+4)),
y =  (3.6+1.5)*sin(deg2rad(sub[1,3]+4)),
xpd = NA, labels = round(min(sub_eff[,3]), 2), col = cols[i], cex = 0.8)
text(srt = 0,
x = (3.6+1.5)*cos(deg2rad(sub[nrow(sub),3]-4)),
y =  (3.6+1.5)*sin(deg2rad(sub[nrow(sub),3]-4)),
xpd = NA, labels = round(max(sub_eff[,3]), 2), col = cols[i], cex = 0.8)
}
###legend of bar
rec_cols = viridis::viridis(11)
x = seq(3,5, length.out = 12)
for(i in 1:length(rec_cols)){
rect(xleft = x[i], xright = x[i+1], ybottom = -5, ytop = -5+diff(x)[1], col = rec_cols[i], xpd = NA, border = NA)
}
text(x[1],-5.2, labels = -1)
text(x[11],-5.2, labels = +1)
rec_cols = viridis::viridis(11)
x = seq(3,5, length.out = 12)
for(i in 1:length(rec_cols)){
rect(xleft = x[i], xright = x[i+1], ybottom = -5, ytop = -5+diff(x)[1], col = rec_cols[i], xpd = NA, border = NA)
}
#abun=as.character(abun)
#x = seq(-5.5,-3, length.out = 21)
#for(i in 1:length(abun)){
# rect(xleft = x[i], xright = x[i+1], ybottom = -5, ytop = -5+diff(x)[1], col = abun[i], xpd = NA, border = NA)
#text(x= x[1]-0.2, y=-5.2, labels = "2", pos = 4, xpd = NA)
#text(x= x[20]-0.2, y=-5.2, labels = "151", pos = 4, xpd = NA)
#}
#text(x=-5, y=-5.3, labels = "Sp. incidence", pos = 4, xpd = NA)
View(effect_comb)
View(effect_comb2)
View(effect_comb)
View(communityB_sort_abun)
#Drawing parameter of OTU and environmental covariant
par(mfrow=c(1,1))
effects= apply(result$beta[[1]], 1, function(o) sum(abs(o)))
n = ncol(result$sigma)# number of otus
max_effects= apply(result$beta[[1]],2, function(e) which.max(abs(e)))
effect_comb = data.frame(cbind(max_effects,sapply(1:n, function(i) result$beta[[1]][max_effects[i],i] )))
effect_comb$name <-spnames2
effect_comb$abun<-communityB_sort_abun$abun
effect_comb$abun<-as.character(effect_comb$abun)
effect_comb_ind = order(effect_comb[,1], effect_comb[,2])
effect_comb = effect_comb[effect_comb_ind, ]
View(effect_comb)
View(effect_comb2)
View(effect_comb)
View(communityB_sort_abun)
library(Hmsc)
library(corrplot)
library(circleplot)
library(tidyverse)
set.seed(1)
number=50
par(mfrow=c(1,1))
sigma = re_scale(result$sigma)[order(apply(communityB, 2, sum)), order(apply(communityB, 2, sum))]
sigmas = sigma[upper.tri(sigma)]
upper = order(sigmas, decreasing = TRUE)[1:number]
lower = order(sigmas, decreasing = FALSE)[1:number]
cuts = cut(sigmas, breaks = seq(-1,1,length.out = 12))
to_plot = 1:length(sigmas) %in% upper | 1:length(sigmas) %in% lower
levels(cuts) = viridis::viridis(11)
cuts = as.character(cuts)
n = ncol(result$sigma)
lineSeq = 4.7
nseg = 100
plot(NULL, NULL, xlim = c(-5,5), ylim =c(-5,5),pty="s", axes = F, xlab = "", ylab = "")
text(x = 0, y = 5.7, pos = 3, xpd = NA, labels = "best")
xx = lineSeq*cos( seq(0,2*pi, length.out=nseg) )
yy = lineSeq*sin( seq(0,2*pi, length.out=nseg) )
polygon(xx,yy, col= "white", border = "black", lty = 1, lwd = 1)
angles = seq(0,355,length.out = n+1)[1:(n)]
xx = cos(deg2rad(angles))*lineSeq
yy = sin(deg2rad(angles))*lineSeq
counter = 1
coords = cbind(xx, yy, angles)
for(i in 2:n) {
for(j in 1:(i-1)){
if(to_plot[counter]) add_curve(coords[i,], coords[j,], col = cuts[counter], n = 5, lineSeq = lineSeq)
counter = counter + 1
#cat(counter, "\n")
}
}
communityB_logs = log(sort(apply(communityB, 2, sum)))
cuts = cut(communityB_logs, breaks = 10)
cols = viridis::magma(10) #colfunc(5)
levels(cuts) = cols
spnames2=paste("sp",1:n,sep = "")
abun=as.character(cuts)
spsort=1:n
communityB_sort_abun<-data.frame(spsort,apply(communityB, 2, sum))
communityB_sort_abun_ind = order(communityB_sort_abun$apply.communityB..2..sum.)
communityB_sort_abun = communityB_sort_abun[communityB_sort_abun_ind, ]
communityB_sort_abun$abun<-abun
communityB_sort_abun_ind = order(communityB_sort_abun$spsort)
communityB_sort_abun = communityB_sort_abun[communityB_sort_abun_ind, ]
#add abundance legends
lineSeq = 5.0
for(i in 1:length(communityB_logs)){
p1 = coords[i,]
x1 = c(cos(deg2rad(p1[3]))*(lineSeq+0.1), cos(deg2rad(p1[3]))*(lineSeq+0.3))
y1 = c(sin(deg2rad(p1[3]))* (lineSeq+0.1), sin(deg2rad(p1[3]))* (lineSeq+0.3))
segments(x0 = x1[1], x1 = x1[2], y0 = y1[1], y1 = y1[2], col = as.character(cuts[i]), lend = 1)
#curve_text(coords[i,3], label = spnames2[i],reverse = T,lineSeq =lineSeq +0.2, middle = TRUE, extend = 1.2, col = as.character(cuts[i]))
}
add_legend(viridis::viridis(11), angles = c(140,110),radius = 5.4)
text(cos(deg2rad(123))*(lineSeq+1), sin(deg2rad(123))*(lineSeq+1.2), labels = "covariance", pos = 2, xpd = NA)
add_legend(cols = cols, range = c(2, 16), angles = c(70,40),radius = 5.4)
text(cos(deg2rad(53))*(lineSeq+1), sin(deg2rad(55))*(lineSeq+1.1), labels = "Sp. incidence", pos = 4, xpd = NA)
### arrows
segments(x0 = cos(deg2rad(-1))*(lineSeq-0.2), x1 = cos(deg2rad(-1))*(lineSeq+0.9),
y0 = sin(deg2rad(-1))*(lineSeq-0.2), y1 = sin(deg2rad(-1))*(lineSeq+0.9), xpd = NA)
segments(x0 = cos(deg2rad(356))*(lineSeq-0.2), x1 = cos(deg2rad(356))*(lineSeq+0.9),
y0 = sin(deg2rad(356))*(lineSeq-0.2), y1 = sin(deg2rad(356))*(lineSeq+0.9), xpd = NA)
# first
angles = seq(150,195,length.out = n+1)[1:(n)]
xx = cos(deg2rad(angles))*(lineSeq+0.6)
yy = sin(deg2rad(angles))*(lineSeq+0.6)
lines(xx, yy, xpd = NA)
end = curve_text(195+3, "Species",lineSeq = lineSeq+0.6,reverse = TRUE)
# second
angles = seq(rad2deg(end)+3,rad2deg(end)+45+8,length.out = n+1)[1:(n)]
xx = cos(deg2rad(angles))*(lineSeq+0.6)
yy = sin(deg2rad(angles))*(lineSeq+0.6)
lines(xx, yy, xpd = NA)
arrow_angle = max(angles)-2.8
polygon(x = c(cos(deg2rad(arrow_angle))*(lineSeq+0.5), cos(deg2rad(arrow_angle))*(lineSeq+0.7), cos(deg2rad(max(angles)))*(lineSeq+0.6), cos(deg2rad(arrow_angle))*(lineSeq+0.5)),
y = c(sin(deg2rad(arrow_angle))*(lineSeq+0.5), sin(deg2rad(arrow_angle))*(lineSeq+0.7), sin(deg2rad(max(angles)))*(lineSeq+0.6), sin(deg2rad(arrow_angle))*(lineSeq+0.5)),col = "black", xpd = NA)
View(habitatN)
#rL
sample.id <- factor((habitatN$sample_name), levels=fhtnmdf_Acti_Amph_2$nm_Kit_ID)
#rL
sample.id <- factor((habitatN$sample_name), levels=habitatN$sample_name)
xycoords <- data.frame(habitatN$Easting,habitatN$Northing)
rownames(xycoords)<-sample.id
str(xycoords)
#Define variables
studyDesign = data.frame(sample = sample.id)
rL = HmscRandomLevel(sData = xycoords)
View(habitat2)
library("ape")
ns = 50
phy = rcoal(n=ns, tip.label = sprintf('species_%.3d',1:ns), br = "coalescent")
plot(phy, show.tip.label = FALSE, no.margin = TRUE)
View(phy)
#XData
habitat2<-habitatN%>% dplyr::select(Gov_type,altitude,Canopy,DBH,infestation_rate,stump)
View(habitatN)
#XData
habitat2<-habitatN%>% dplyr::select(Gov_Type,altitude,Canopy,DBH,infestation_rate,stump)
View(habitat2)
#XData
habitat2<-habitatN%>% dplyr::select(altitude,Canopy,DBH,infestation_rate,stump)
View(habitat2)
habitat2<-scale(habitat2)
habitat2<-data.frame(scale(habitat2))
#XData
habitat2<-habitatN%>% dplyr::select(altitude,Canopy,DBH,infestation_rate,stump)
habitat2<-data.frame(scale(habitat2))
habitat2$Gov_Type<-habitatN$Gov_Type
View(habitat2)
#XData
habitat2<-habitatN%>% dplyr::select(altitude,Canopy,DBH,infestation_rate,stump)
habitat2<-data.frame(scale(habitat2))
habitat2$Gov_Type<-habitatN$Gov_Type
#Y
communityB
#rL
sample.id <- factor((habitatN$sample_name), levels=habitatN$sample_name)
xycoords <- data.frame(habitatN$Easting,habitatN$Northing)
rownames(xycoords)<-sample.id
str(xycoords)
#Define variables
studyDesign = data.frame(sample = sample.id)
rL = HmscRandomLevel(sData = xycoords)
XFormula= ~altitude+canopy+DBH+infestation+stump+Gov_Type
#phy
MLtree.tre <- read.table("RAxML_bestTree_ct878_20190905")
ML.tre <- ade4::newick2phylog(MLtree.tre$V1)
#setting model structure
model = Hmsc(Y= communityB,XData=habitat2,XFormula=XFormula,distr="probit",studyDesign=studyDesign,ranLevels=list("sample"=rL))
XFormula= ~altitude+Canopy+DBH+infestation+stump+Gov_Type
#setting model structure
model = Hmsc(Y= communityB,XData=habitat2,XFormula=XFormula,distr="probit",studyDesign=studyDesign,ranLevels=list("sample"=rL))
XFormula= ~altitude+Canopy+DBH+infestation_rate+stump+Gov_Type
#setting model structure
model = Hmsc(Y= communityB,XData=habitat2,XFormula=XFormula,distr="probit",studyDesign=studyDesign,ranLevels=list("sample"=rL))
#fit model
model = sampleMcmc(model, thin = 10, samples = 100, transient = 50, nChains = 2, verbose = 100)
View(phy)
mpost = convertToCodaObject(model)
par(mfrow=c(1,2))
summary(mpost$Alpha[[1]])
plot(mpost$Alpha[[1]])
plot(mpost$Beta[[20]])
summary(mpost$Beta)
par(mfrow=c(2,2))
#Omega: The matrix is the matrix of species-to-species residual covariances.
hist(effectiveSize(mpost$Beta), main="ess(beta)")
hist(gelman.diag(mpost$Beta, multivariate=FALSE)$psrf, main="psrf(beta)")
hist(effectiveSize(mpost$Omega[[1]]), main="ess(omega)")
hist(gelman.diag(mpost$Omega[[1]], multivariate=FALSE)$psrf, main="psrf(omega)")
#Explanatory power
preds.model = computePredictedValues(model)
MF.model = evaluateModelFit(hM=model, predY=preds.model)
MF.model$TjurR2
MF.model
postBeta = getPostEstimate(gcn_fish, parName = "Beta")
postBeta = getPostEstimate(model, parName = "Beta")
par(mfrow=c(1,1))
par(mar=c(10,10,4,1))
plotBeta(model, post = postBeta, param = "Support", supportLevel = 0.95,mar = c(0,0,0,0))
OmegaCor = computeAssociations(model)
supportLevel = 0.95
toPlot = ((OmegaCor[[1]]$support>supportLevel)
+ (OmegaCor[[1]]$support<(1-supportLevel))>0)*OmegaCor[[1]]$mean
corrplot(toPlot, method = "color",
col = colorRampPalette(c("blue","white","red"))(200),
title = paste("random effect level:", gcn$rLNames[1]), mar=c(0,0,1,0))
corrplot(toPlot, method = "color",
col = colorRampPalette(c("blue","white","red"))(200),
title = paste("random effect level:", model$rLNames[1]), mar=c(0,0,1,0))
etaPost=getPostEstimate(model, "Eta")
lambdaPost=getPostEstimate(model, "Lambda")
par(mfrow=c(1,1))
names=model$spNames
biPlot(model, etaPost = etaPost, lambdaPost = lambdaPost, factors = c(1,2))
Gradient = constructGradient(model,focalVariable = "GCN_Positive_out_of_12")
model$XData
Gradient = constructGradient(model,focalVariable = "Gov_Type")
#Gradient$XDataNew
predY = predict(model, XData=Gradient$XDataNew, studyDesign=Gradient$studyDesignNew,
ranLevels=Gradient$rLNew, expected=T)
#species richness
plotGradient(model, Gradient, pred=predY, measure="S", showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 19, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 3, showData = TRUE)
Gradient = constructGradient(model,focalVariable = "Canopy")
#Gradient$XDataNew
predY = predict(model, XData=Gradient$XDataNew, studyDesign=Gradient$studyDesignNew,
ranLevels=Gradient$rLNew, expected=T)
#species richness
plotGradient(model, Gradient, pred=predY, measure="S", showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 3, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 1, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 2, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 4, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 5, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 6, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 13, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 23, showData = TRUE)
#individual species
plotGradient(model, Gradient, pred=predY, measure="Y", index = 100, showData = TRUE)
install.packages("tidyverse")
install.packages("devtools")
Sys.which("R")
install.packages(c("ade4", "ape", "beanplot", "beepr", "betapart", "bold", "boral", "car", "corrplot", "iNEXT", "metacoder", "metap", "mvabund", "pheatmap", "seqinr", "simba", "UpSetR", "zetadiv"))
install.packages("viridis")
